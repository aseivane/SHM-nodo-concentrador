version: '3.8'

services:
  nginx:
    container_name: nginxproxy
    image: nginxproxy/nginx-proxy:1.3.1-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - type: bind
        source: ./docker/nginx/nginx.conf
        target: /etc/nginx/nginx.conf
      - type: bind
        source: ./docker/nginx/conf.d
        target: /etc/nginx/conf.d
      - type: bind
        source: ./docker/nginx/vhost.d
        target: /etc/nginx/vhost.d
    restart: always
    networks:
      - my_network
    logging:
      options:
        max-size: "10k"
        max-file: "1" 
        labels: "nginx"
        env: "production"
      driver: json-file

  next-app:
    container_name: frontend
    image: frontend:0.2
    build:
      context: "../SHM-React-website/shm-nextjs-website"
      dockerfile: Dockerfile.prod
      args:
        NEXT_PUBLIC_HOST_NAME: ${HOST_DOMAIN}
    restart: always
    networks:
      my_network:    
        aliases:
          - frontend.shm-fiuba.edu
    expose:
      - "3002"
    environment:
      - VIRTUAL_PORT=3002
      - VIRTUAL_HOST=shm-fiuba.edu
    logging:
      options:
        max-size: "10k"
        max-file: "1" 
        labels: "frontend"
        env: "production"
      driver: json-file

  node-app:
    container_name: backend
    image: backend:0.2
    build:
      context: ../SHM-API
      dockerfile: Dockerfile.prod
    restart: always
    expose:
      - "3001"
    networks:
      my_network:
        aliases:
          - backend.shm-fiuba.edu
    volumes:
      - ../SHM-API/public:/app/public
    logging:
      options:
        max-size: "10k"
        max-file: "1" 
        labels: "backend"
        env: "production"
      driver: json-file
  
  mosquitto:
    container_name: mosquitto
    image: eclipse-mosquitto:2
    volumes:
      - type: bind
        source: ./docker/mosquitto/config/
        target: /mosquitto/config/
      - type: bind
        source: ./docker/mosquitto/log/
        target: /mosquitto/log/
      - type: volume
        source: mosquitto_data
        target: /mosquitto/data/
    ports:
      - target: 1883
        published: 1883
        protocol: tcp
        mode: host
      - target: 9001
        published: 9001
        protocol: tcp
        mode: host
    restart: always
    networks:
      my_network:    
        aliases:
          - mosquitto.shm-fiuba.edu
    logging:
      options:
        max-size: "10k"
        max-file: "1" 
        labels: "mosquitto"
        env: "production"
      driver: json-file

  filebrowser:
    container_name: filebrowser
    image: filebrowser/filebrowser:v2.23.0
    volumes:
      - type: bind
        source: ../SHM-API/public/datos/mediciones
        target: /srv
      - type: bind
        source: ./docker/filebrowser/filebrowser.db
        target: /database.db
      - type: bind
        source: ./docker/filebrowser/.filebrowser.json
        target: /.filebrowser.json
    restart: always
    expose:
      - 80
    networks:
      my_network:    
        aliases:
          - filebrowser.shm-fiuba.edu
    logging:
      options:
        max-size: "10k"
        max-file: "1" 
        labels: "filebrowser"
        env: "production"
      driver: json-file

  tictoc:
    container_name: tictoc
    image: tictoc:1.0
    build:
      context: ./docker/tic-toc
      dockerfile: Dockerfile
    ports:
      - "8080:8080/udp"
    restart: always
    expose:
      - 8080/udp
    networks:
      my_network:    
        aliases:
          - tictoc.shm-fiuba.edu
    logging:
      options:
        max-size: "10k"
        max-file: "1" 
        labels: "tictoc"
        env: "production"
      driver: json-file

volumes:
  mosquitto_data:
    name: "mqtt-broker-data"
  filebrowser:
    name: "filebrowser files"

  


# Define a network, which allows containers to communicate
# with each other, by using their container name as a hostname
networks:
  my_network:
    name: my_network
