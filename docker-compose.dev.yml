version: '3.8'

services:
  nginx:
    container_name: nginxproxy
    image: nginxproxy/nginx-proxy:1.3.1-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - type: bind
        source: ./nginx/nginx.conf
        target: /etc/nginx/nginx.conf
      - type: bind
        source: ./nginx/conf.d
        target: /etc/nginx/conf.d
      - type: bind
        source: ./nginx/vhost.d
        target: /etc/nginx/vhost.d
    networks:
      - my_network

  next-app:
    container_name: frontend
    image: frontend:0.2
    build:
      context: "../SHM-React-website/shm-nextjs-website"
      dockerfile: Dockerfile.dev
      args:
        ENV_VARIABLE: ${ENV_VARIABLE}
        NEXT_PUBLIC_ENV_VARIABLE: ${NEXT_PUBLIC_ENV_VARIABLE}
    restart: always
    networks:
      my_network:    
        aliases:
          - frontend.shm.com
    expose:
      - "3002"
    environment:
      - VIRTUAL_PORT=3002
      - VIRTUAL_HOST=shm.com
    volumes:
      - ../SHM-React-website/shm-nextjs-website:/app
      - type: volume
        source: front_modules
        target: /app/node_modules
      - type: volume
        source: front_next
        target: /app/.next

  node-app:
    container_name: backend
    image: backend:0.2
    build:
      context: ../SHM-API
      dockerfile: Dockerfile.dev
      args:
        ENV_VARIABLE: ${ENV_VARIABLE}
    restart: always
    ports:
      - "3001:3001"
    expose:
      - "3001"
    networks:
      my_network:
        aliases:
          - backend.shm.com
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ../SHM-API:/app
      - type: volume
        source: api_modules
        target: /app/node_modules
  
  mosquitto:
    container_name: mosquitto
    image: mosquitto:2.0
    build:
      context: ./mosquitto
      args:
        - USER=${USER}
        - GID=${GID}
        - UID=${UID}
    volumes:
      - type: bind
        source: ./mosquitto/config/
        target: /mosquitto/config/
      - type: bind
        source: ./mosquitto/log/
        target: /mosquitto/log/
      - type: volume
        source: mosquitto_data
        target: /mosquitto/data/
    ports:
      - target: 1883
        published: 1883
        protocol: tcp
        mode: host
      - target: 9001
        published: 9001
        protocol: tcp
        mode: host
    networks:
      my_network:    
        aliases:
          - mosquitto.shm.com

  filebrowser:
    container_name: filebrowser
    image: filebrowser/filebrowser:v2.23.0
    volumes:
      - type: bind
        source: ../SHM-API/public
        target: /srv
      - type: bind
        source: filebrowser/filebrowser.db
        target: /database.db
      - type: bind
        source: ./filebrowser/.filebrowser.json
        target: /.filebrowser.json
    expose:
      - 80
    networks:
      my_network:    
        aliases:
          - filebrowser.shm.com

  tictoc:
    container_name: tictoc
    image: tictoc:1.0
    build:
      context: ./tic-toc
      dockerfile: Dockerfile
    ports:
      - "8080:8080/udp"
    expose:
      - 8080/udp
    environment:
      - VIRTUAL_PORT=8080
    volumes:
      - type: bind
        source: ./tic-toc/log/
        target: /app/log/
    networks:
      my_network:    
        aliases:
          - tictoc.shm.com

volumes:
  mosquitto_data:
    name: "mqtt-broker-data"
  filebrowser:
    name: "filebrowser files"
  api_modules:
    name: "api_node_modules"
  front_modules:
    name: "front_node_modules"
  front_next:
    name: "next"

  


# Define a network, which allows containers to communicate
# with each other, by using their container name as a hostname
networks:
  my_network:
    external: true
