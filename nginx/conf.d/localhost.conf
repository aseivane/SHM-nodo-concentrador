server {
    server_name localhost;
    access_log /var/log/nginx/access.log main;
    listen 80 ;
    listen 443 ssl http2 ;
    # No certificate found for this vhost, so force nginx to emit a TLS error if
    # the client connects via https.
    ssl_ciphers aNULL;
    set $empty "";
    ssl_certificate data:$empty;
    ssl_certificate_key data:$empty;
    if ($https) {
        return 444;
    }

    location ^~ /api {
        rewrite ^/api(/.*)$ $1 break;
        proxy_read_timeout 1h;
        proxy_pass http://backend:3001/; #necesita el /
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Proto $scheme;
        set $upstream_keepalive false;
    }

    location ^~ /files {
        proxy_pass http://filebrowser:80; #necesita el /
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Proto $scheme;
        set $upstream_keepalive false;
    }

    location / {
        proxy_pass http://frontend:3002/;
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Proto $scheme;
        set $upstream_keepalive false;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

}